PHP DAO Generator:
====================
This project is a fork of the excellent work done by http://phpdao.com/ 
It adds more features and is written to support mysqli rather than only mysql.
The API changed a bit because of it's compatibility with CodeIgniter, our primary framework when it comes down to PHP development.
A vanilla version is still available but the API as explained on phpdao.com is no longer valid. The main difference is the fact that the DAOFactory is now instance based rather than calling all functions via a static interface.

Extra features:
---------------------
- separate queryBy and deleteBy functions for tables with combined multiple keys
- numRows function with optional where clause
- optional extra $single variable for queryBy functions. Returns only 1 (first) result instead of array. Null if no results found.
- Selective loading of DTO/DAO classes instead of including all classes for the entire database (using Factory->load function)
- CodeIgniter compatible version
- Written for mysqli connections

Installation:
====================
1. Download entire library
2. Put the files somewhere on your server
3. Visit the index.php page with your favourite browser
4. Fill out the required fields
5. Generate some DAOs!

Usage:
====================
Vanilla version
---------------------
1. Include DAOFactory and the necessary classes by including include_dao.php
2. Create a new DAOFactory instance
```
#!php
$factory = new DAOFactory();
```
3. Load the necessary DAO/DTO classes for a particular table
```
#!php
$factory->load('TableName');
```
4. Run queries on a particular table by accessing it's DAO and calling functions
```
#!php
$items = $factory->getTableNameDAO()->queryAll();
```
5. List of functions:

a. load($primaryKeys, ...)
b. queryAll()
c. queryAllOrderBy($column)
d. insert($itemInstance)
e. update($itemInstance)
f. clean()
g. queryByFieldName($value, $single) where FieldName is the name of the field and $value is the clause for querying
h. deleteByFieldName($value) where FieldName is the name of the field and $value is the clause for querying
i. numRows($fieldName, $where)

6. Use the MysqlExt classes to add additional functions to the DAO classes. They are stored in mysql/ext and will not be overwritten by the generator

Usage CodeIgniter version:
---------------------
0. Place all files in app's model directory. Put DAOFactory.php in root of model directory

1. Load model (or autoload)

$this->load->model('DAOFactory');

2. Load the necessary DTO/DAO file (depend on which table(s) you want to approach)

$this->DAOFactory->load('TableName');
or 
$this->DAOFactory->loadAll($arrayOfTableNames);

3. Use DAOFactory like you would normally do, call DAO object and execute functions

$this->DAOFactory->getTableNameDAO();

Using Transactions:
---------------------
a. Start a new transaction

$t = new Transaction();

b. Do all kind of db operations
c. Commit or rollback

$t->commit(); or $t->rollback();